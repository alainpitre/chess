function Piece(type, player){

	var public = {};
	var private = {};

	public.type = "";
	public.moves = undefined;
	public.node = undefined;
	public.player = undefined;
	public.square = undefined;

	private.construct = function(){
		public.type = type;
		public.player = player;
		public.moves = new Moves(public);
		public.setNode();
	};

	public.setNode = function(){
		public.node = document.createElement("div");
		public.node.setAttribute('class', 'piece');
		public.node.addEventListener('click', function(){
			event.clickSquare(public.square);
		});
	};

	public.setHtml = function(html){
		public.node.innerHTML = html[player.id];
	};

	public.getPosition = function(){
		return {'x' : public.square.position.x, 'y' : public.square.position.y};
	};

	public.remove = function(){
		public.player.removePiece(public);
		public.square = undefined;
		public.node.remove();
	};

	public.animate = function(square){
		//private.slide(public.square.getOffset());
		$(public.node).animate(public.square.getOffset());
	};

	private.slide = function(offset){

		//var left = public.node.offsetLeft;
		//var top = public.node.offsetTop;

		var speed = 5;

		if(offset.left == offset.left % speed){
			var left =  offset.left;
		}else{
			var testLeft = public.node.offsetLeft - offset.left
			var left = public.node.offsetLeft - ((testLeft / Math.abs(testLeft)) * speed);
		}

		if(offset.top == offset.top % speed){
			var top = offset.top;
		}else{
			var testTop = public.node.offsetTop - offset.top
			var top = public.node.offsetTop - ((testTop / Math.abs(testTop)) * speed);
		}

		/*
		var speed = 5;

		if(offset.left == offset.left % speed) left = offset.left;

		if(offset.top == offset.top % speed) top = offset.top;

		if(left > offset.left) left -= speed;
		
		if(left < offset.left) left += speed;

		if(top > offset.top) top -= speed;
			
		if(top < offset.top) top += speed;

		*/

		if(left != public.node.offsetLeft || top != public.node.offsetTop){

			public.node.setAttribute('style', 'left:'+left+'px; top:'+top+'px');

			setTimeout(function(){ 
				private.slide(offset);
			}, 1);

		}

	};

	public.setMoves = function(){
		//Redefined in all childrens class
	};

	public.removeCount = function(){
		public.moves.qts--;
	};

	public.addCount = function(){
		public.moves.qts++;
	};

	public.getCount = function(){
		return public.moves.qts;
	};

	public.isStarting = function(){
		return public.getCount() == 0;
	};

	public.canEatKing = function(){
		var squares = public.moves.getSquares();
		for(var key in squares){
			if(squares[key].hasEnemyPlayer(public.player) && squares[key].hasKing())
				return true;
		}
		return false;
	};

	public.showMoves = function(){
		var squares = public.moves.getSquares();
		for(var key in squares){
			squares[key].activate();
		}
	};

	public.hideMoves = function(){
		var squares = public.moves.getSquares();
		for(var key in squares){
			squares[key].desactivate();
		}
	};

	public.toString = function(){
		console.log(public.type, public.getCount());
	};

	private.construct();
	return public;

}